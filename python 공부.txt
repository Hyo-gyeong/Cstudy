###################################
print()
-',"혼합
-'' ,'' 연결되어 출력됨
-숫자는 '," 상관없이 그대로
>>> a='a'
>>> b='b'
>>> print(a+"!"+b)
a!b
>>> a = 2
>>> b = 3
>>> print(a,4,b)
2 4 3
>>> a='a'
>>> b='b'
>>> print(a,'b',b)
a b b
>>> a=4
>>> b=5
>>> print(a,'*',b)
4 * 5
>>> print(a+'*'+b)
Traceback (most recent call last):
  File "<pyshell#48>", line 1, in <module>
    print(a+'*'+b)
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> a='a'
>>> b='b'
>>> print(a+'*'+b)
a*b
-print([123])
>>>[123]
---sep
>>> print('naver','kakao','sk','samsung', sep='/')
naver/kakao/sk/samsung

---end
기본적으로 print 함수는 문자열 혹은 숫자를 출력하고, 그 끝에 줄바꿈문자를 삽입합니다
문자열을 출력하고 줄바꿈 줄바꿈 대신에 한칸의 공백을 삽입하면 한줄에 두 개의 단어를 출력할 수 있습니다.
>>> print('first', end=' ');print('second', end=' ')
first second 

---len // 숫자에는 존재하지 않음
>>> string = "dk2jd923i1jdk2jd93jfd92jd918943jfd8923"
>>> print(len(string))
38

---문자형 vs 숫자형
>>> a = '3'
>>> b = '4'
>>> print(a+b)
34
>>> a = 3
>>> b = 4
>>> print(a+b)
7

>>> s = "hello"
>>> t = python
>>> print(s + '! ' + t)
hello! python

---index
>>> lang = 'python'
>>> print(lang[0] + " "  + lang[1])
p y
>>> print(lang[0] + " "  + lang[2])
p t
>>> license_plate = "24가 2210"
>>> print(license_plate[4:])
2210
>>> print(license_plate[-5:])
 2210

---slice
슬라이싱의 세 번째 값은 인덱스의 증감폭을 지정합니다.
>>> string = "홀짝홀짝홀짝"
>>> print(string[0::2])
홀홀홀
>>> print(string[1::2])
짝짝짝
증감폭을 음수로 지정하면 역순으로 문자들을 가져옵니다.
>>> print(string[(시작index)::-1])
짝홀짝홀짝홀

---replace
>>> phone_number = "010-1111-2222"
>>> phone_number.replace("-", " ")
'010 1111 2222'

---append, insert
>>> movie_rank = ['닥터 스트레인지', '스플릿', '럭키']
>>> print(movie_rank)
['닥터 스트레인지', '스플릿', '럭키']
>>> movie_rank.append('배트맨')
>>> print(movie_rank)
['닥터 스트레인지', '스플릿', '럭키', '배트맨']
>>> movie_rank.insert(1,'슈퍼맨')
>>> print(movie_rank)
['닥터 스트레인지', '슈퍼맨', '스플릿', '럭키', '배트맨']

---remove & del
>>> movie_rank.remove('럭키')
>>> print(movie_rank)
['닥터 스트레인지', '슈퍼맨', '스플릿', '배트맨']
>>> del movie_rank[1]
>>> print(movie_rank)
['닥터 스트레인지', '스플릿', '배트맨']
>>> del movie_rank[1:]
>>> print(movie_rank)
['닥터 스트레인지']

---max, min
>>> nums = [1,2,3,4,5,6,7]
>>> print(max(nums) + ','+ min(nums))
Traceback (most recent call last):
  File "<pyshell#80>", line 1, in <module>
    print(max(nums) + ','+ min(nums))
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> print(max(nums) , ',',  min(nums))
7 , 1

>>> print(type(max(nums)))
<class 'int'>
>>> print('max: ', max(nums))
max:  7
>>> print('max: ' + str(max(nums)))
max: 7

---sum
>>> nums = [1,2,3,4,5,6,7]
>>> print(sum(nums))
28

---len
>>> cook = ["피자", "김밥", "만두", "양념치킨", "족발", "피자", "김치만두", "쫄면", "쏘세지", "라면", "팥빙수", "김치전"]
>>> print(len(cook))
12

파이썬은 기본적으로 평균을 구하는 함수를 제공하지 않습니다
>>> nums = [1, 2, 3, 4, 5]
>>> print(sum(nums)/len(nums))
3.0


#####################################
input()
-input() 
input 기다림
-input('asdf')
'asdf' input기다림
-age = input('how old R U?')
변수에 입력값 넣을 수 있음

variable
-대소문자 구분가능
-num = 1
-num * 10
>>>10
-num + 2
>>>3
-num = num * 24
>>>num
24
이렇게 변수 덮을 수도 있음
띄어쓰기 안되고 숫자로 시작 안되고
띄어쓰기 대신 _ 많이 사용

######################################
data type
num = 3
f = 3.14
type(1)
<class 'int'>
type(num)
<class 'int'>
type(f)
<class 'float'>
3+3
>>>6
->>바로 계산 가능

######################################
String
따옴표로 표시해야함
>>>"hello"
'hello'
>>>'hello'
'hello'

######################################
boolean
Ture/False  예약어
>>>b = True
>>>print(b)
Ture
>>>print(False)
False

#######################################
Llist
>>> student = ['a','b','c']
>>> for i in student:
	print(i)

	
a
b
c
>>> for i in '배고파':
	print(i)

	
배
고
파
>>>student
['a', 'b', 'c']
>>> a = [1,2,3]
>>> a
[1, 2, 3]
>>> student = ['asdf','asdf',2]
>>> student
['asdf', 'asdf', 2]
@@@@@@
>>>import random
>>> print(random.choice(student))
a
>>> print(random.choice(student))
c
@@@@@@붙일 수 있음
>>>student.append('d')
>>>student
['a, 'b', 'c', 'd']
@@@@@@바꿀 수 있음
>>> student[0] = 'x'
>>> student
['x', 'b', 'c', 'd']
>>> l1 = ['c', 'c#', 'python']
>>> l2 = ['java', 'Django', 'js']
>>> l3 = l1 + l2
>>> print(l3)
['c', 'c#', 'python', 'java', 'Django', 'js']

#################################
Tuple : 수정 불가
>>> mt = ('a','a','b','g','t')
>>> mt
('a', 'a', 'b', 'g', 't')
>>> mt[0] = 'v'
Traceback (most recent call last):
  File "<pyshell#72>", line 1, in <module>
    mt[0] = 'v'
TypeError: 'tuple' object does not support item assignment

>>> mt= 1,2,3,4
>>> mtt = (1,2,3,4,5)
>>> print(mt + mtt)
(1, 2, 3, 4, 1, 2, 3, 4, 5)
>>> print(mt + '&' + mtt)
Traceback (most recent call last):
  File "<pyshell#41>", line 1, in <module>
    print(mt + '&' + mtt)
TypeError: can only concatenate tuple (not "str") to tuple
>>> print(mt, '&', mtt)
(1, 2, 3, 4) & (1, 2, 3, 4, 5)

###############################################
Dictionary: 값이 의미있는 의미를 붙여줌
>>> my_dic = {'a':'A', 'b':'B', 'c':'C'}
>>> my_dic
{'a': 'A', 'b': 'B', 'c': 'C'}
>>> my_dic['a']
'A'
>>> my_dic['a'] = 'R'
>>> my_dic
{'a': 'R', 'b': 'B', 'c': 'C'}

>>> dic = {1:3, 'g':'t', 'r':3}
>>> dic['1'] = 5
>>> print(dic)
{1: 4, 'g': 't', 'r': 3, '1': 5}  //추가가 됨

>>> nickName = {}
>>> nickName['효경'] = '효갱'
>>> nickName
{'효경': '효갱'}
>>> nickName['혜윤'] = '도리'
>>> nickName
{'효경': '효갱', '혜윤': '도리'}
>>> nickName[0] = 6
>>> nickName
{'효경': '효갱', '혜윤': '도리', 0: 6}
>>> del nickName[0]
>>> nickName
{'효경': '효갱', '혜윤': '도리'}
>>> nickName['아빠'] = '요미벌즤'
>>> nickName['엄마'] = '가와이 마미'
>>> nickName
{'효경': '효갱', '혜윤': '도리', '아빠': '요미벌즤', '엄마': '가와이 마미'}

>>> for v in nickName.values():
	print(v)

	
효갱
도리
요미벌즤
가와이 마미

>>> for member in nickName.keys():
	print(member)

	
효경
혜윤
아빠
엄마

>>> for k, v in nickName.items():
	print(k, v)

	
효경 효갱
혜윤 도리
아빠 요미벌즤
엄마 가와이 마미

>>> for k, v in nickName:
	print(k, v)

	
효 경
혜 윤
아 빠
엄 마
###################################################
자료형 변환
>>> mint = 1
>>> type(mint)
<class 'int'>
>>> float(mint)
1.0
>>> str(mint)
'1'
>>> type(str(mint))
<class 'str'>
>>> mstr = 'code'
>>> mstr
'code'
>>> list(mstr)
['c', 'o', 'd', 'e']

#comment
#이용
>>> print('hello') # 안뇽을 표시합니다
hello
>>> print(2+3) # 계산결과를 출력합니다
5 

>>> mstr = '신효경'
>>> print(mstr)
신효경
>>> type(mstr)
<class 'str'>
>>> mstr= "효경"
>>> print(mstr)
효경
>>> type(mstr)
<class 'str'>
>>> lstr = """나
너
우리
모두
"""
>>> print(lstr)
나
너
우리
모두

>>> type(lstr)
<class 'str'>

############################
Formatting
s는 문자열 대입에 사용
>>> my_str = 'My name is %s' % 'Hyo Gyeong'
>>> print(my_str)
My name is Hyo Gyeong
d는 정수형 대입
>>> '%d %d' % (1,2) ++2개 이상일 때는 꼭 묶어서
'1 2'
>>> "%f" % 3.14
'3.140000'
##{ }.format 가 좀더 파이썬 스러운 방법
>>> 'My name is {}'.format('효경')
'My name is 효경'
>>> '{} * {} = {}'.format(2,3,2*3)
'2 * 3 = 6'
주소값도 바꿀 수 있음
>>> '{1} * {0} = {2}'.format(2,3,2*3)
'3 * 2 = 6' 

###############################
Indexing(뽑아쓰기)
>>> song = '지금 듣고있는 노래는 태연 노래'
>>> song[2]
' '
>>> song[6]
'는'
>>> song[-1]
'래'
Slicing(잘라쓰기)
>>> song[0:6]
'지금 듣고있'
>>> song[:7]
'지금 듣고있는'
>>> song[9:]
'래는 태연 노래'

##################################
.split : 문자에만 사용가능
>>> song.split()
['지금', '듣고있는', '노래는', '태연', '노래']
>>> fruit = '딸기,파인애플,수박,망고,체리,귤'
>>> fruit.split(',')
['딸기', '파인애플', '수박', '망고', '체리', '귤']

.pop(index) : index해당 value제거
>>> fruit = ['딸기','망고','체리']
>>> print(fruit)
['딸기', '망고', '체리']
>>> fruit.pop(0)
'딸기'
>>> print(fruit)
['망고', '체리']

.sort : 정렬
>>> alphabet = ['a','e','r','h','f','w','c','h']
>>> alphabet.sort()
>>> print(alphabet)
['a', 'c', 'e', 'f', 'h', 'h', 'r', 'w']

.count 
>>> mylist = [1,2,4,5,2,7,8,5,8,9,4,6,7,3,8]
>>> mylist.count('5')
0
>>> mylist.count(4)
2

####################################
packing & unpacking

>>> mt_tuple = 1,4,7 #packing
>>> n1, n2, n3 = mt_tuple #unpacking
>>> n1
1
>>> n2
4
>>> n3
7
>>> n1, n2 = n2, n1#순서도 바꿀 수 있음
>>> n1
4
>>> n2
1

####################################
range

>>> for i in range(0,3):
	print(i)

	
0
1
2
>>> for i in range(5,7):
	print(i)

	
5
6
>>> for i in range(3):
	print(i)

	
0
1
2

>>> for i in range(2,10):
	for j in range(1,10):
		print("{}x{}={}".format(i,j,i*j))
	print("\n")

	
2x1=2
2x2=4
2x3=6
2x4=8
2x5=10
2x6=12
2x7=14
2x8=16
2x9=18


3x1=3
3x2=6
3x3=9
3x4=12
3x5=15
3x6=18
3x7=21
3x8=24
3x9=27


4x1=4
4x2=8
4x3=12
4x4=16
4x5=20
4x6=24
4x7=28
4x8=32
4x9=36


5x1=5
5x2=10
5x3=15
5x4=20
5x5=25
5x6=30
5x7=35
5x8=40
5x9=45


6x1=6
6x2=12
6x3=18
6x4=24
6x5=30
6x6=36
6x7=42
6x8=48
6x9=54


7x1=7
7x2=14
7x3=21
7x4=28
7x5=35
7x6=42
7x7=49
7x8=56
7x9=63


8x1=8
8x2=16
8x3=24
8x4=32
8x5=40
8x6=48
8x7=56
8x8=64
8x9=72


9x1=9
9x2=18
9x3=27
9x4=36
9x5=45
9x6=54
9x7=63
9x8=72
9x9=81

#########################################
Comprehension
>>> numbers = [1,2,3,4,5,6,7,8,9,10]
>>> odd_numbers = []
>>> for num in numbers:
	if num % 2 == 1:
		odd_numbers.append(num)

		
>>> print(odd_numbers)
[1, 3, 5, 7, 9]
이거를
>>> [num for num in numbers if num % 2 == 1]
[1, 3, 5, 7, 9]
이렇게 간결하게

#######################################
계산
>>> 4 / 5
0.8
>>> 4 //5
0

>>> 2 ** 4
16
>>> 3 ** 2
9
>>> 7 ** 8
5764801

########################################
if & for

>>> nums = [1,2,3,4,5,6,7,8,9,10]
>>> for i in nums:
	if i % 2 == 1:
		print(i,": 홀수")
	else:
		print(i,": 짝수")

		
1 : 홀수
2 : 짝수
3 : 홀수
4 : 짝수
5 : 홀수
6 : 짝수
7 : 홀수
8 : 짝수
9 : 홀수
10 : 짝수

####################################
문자열 연산자

>>> '난'+'신효경'+'입니다'
'난신효경입니다'
>>> "음료수" * 4
'음료수음료수음료수음료수'
>>> "음료수 "*4
'음료수 음료수 음료수 음료수 '

>>> def jump():
	print("콩! "*5)

	
>>> jump()
콩! 콩! 콩! 콩! 콩!

#######################################
and or not

>>> 5 == 6
False
>>> 5 >= 4
True
>>> 2 != 5
True
>>> True and True
True
>>> False or False
False
>>> False or True
True
>>> not False
True
>>> not True
False
>>> True and True
True
>>> True and False
False
>>> height = 160
>>> age = 20
>>> 
>>> height > 170 and age > 25
False

################################
if elif else

>>> name = 'hyo'
>>> if name == 'hyo':
	print(name)
elif name == '호박':
	print('i like u')
else:
	print('^^')

	
hyo
>>> name = 'hh'
>>> if name == 'hyo':
	print(name)
elif name == '호박':
	print('i like u')
else:
	print('^^')

	
^^
>>> name = '호박'
>>> if name == 'hyo':
	print(name)
elif name == '호박':
	print('i like u')
else:
	print('^^')

	
i like u

######################################
while

>>> count = 0
>>> while count < 3:
	print('횟수', count+1)
	count += 1

	
횟수 1
횟수 2
횟수 3 

>>> count = 0
>>> while count < 10:
	count += 1
	if count < 4:
		continue
	print('횟수', count)
	if count == 8:
		break

	
횟수 4
횟수 5
횟수 6
횟수 7
횟수 8

#######################################
Function
종류 : 내장함수, 모듈의 함수, 사용자 정의 함수
장점 : 재사용 가능, 코드관리 쉬움, 조립해서 사용가능

>>> def add(n1, n2):
	return n1+n2

>>> add(1,2)
3
